name: 'Terraform CI/CD'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  id-token: write
  contents: read
  issues: write
  actions: read

env:
  AWS_REGION: us-east-1
  TF_WORKING_DIR: ./log-service-terraform
  TF_ENV: ${{ github.ref_name == 'develop' && 'dev' || 'prod' }}

jobs:
  validate-and-plan:
    name: Validate & Plan
    runs-on: ubuntu-latest
    outputs:
      tf_env: ${{ env.TF_ENV }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Configure AWS Credentials
        if: ${{ !contains(github.event.head_commit.message, '[skip-aws]') }}
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME_GITHUB }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.6.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Terraform Format
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -diff

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          TFVARS_FILE="envs/${TF_ENV}.tfvars"
          terraform plan -no-color -out=tfplan -var-file="$TFVARS_FILE" > tfplan.txt

      - name: Show Terraform Plan in Log
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: cat tfplan.txt

      - name: Generate JSON Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform show -json tfplan > tfplan.json

      - name: Save Plan Artifacts
        uses: actions/upload-artifact@v4.4.3
        with:
          name: tfplan-artifacts
          path: |
            ${{ env.TF_WORKING_DIR }}/tfplan
            ${{ env.TF_WORKING_DIR }}/tfplan.txt
            ${{ env.TF_WORKING_DIR }}/tfplan.json
            ${{ env.TF_WORKING_DIR }}/envs/${{ env.TF_ENV }}.tfvars

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: validate-and-plan
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME_GITHUB }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.6.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: tfplan-artifacts
          path: ${{ env.TF_WORKING_DIR }}

      - name: Check tfvars file exists
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          TFVARS_FILE="envs/${TF_ENV}.tfvars"
          if [ ! -f "$TFVARS_FILE" ]; then
            echo "::error::Missing tfvars file: $TFVARS_FILE"
            exit 1
          fi

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan
